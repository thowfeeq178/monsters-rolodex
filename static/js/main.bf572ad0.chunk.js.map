{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/Button-primary/button-primary-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","getSrc","key","monster","id","name","email","console","log","newGroup","CardList","map","changeto","SearchBox","placeHolder","handleChange","type","placeholder","onChange","ButtonPrimary","onClick","onclickHandler","lable","this","Component","App","onbuttonClickHandler","e","setState","CurrentRoladec","searchField","target","value","state","monsters","myHeaders","Headers","append","fetch","method","headers","redirect","then","response","json","result","Users","catch","error","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","ele","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bf572ad0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n  // console.log(props)\r\n  return (\r\n  <div className=\"card-container\">\r\n  <img alt=\"moster\" src={getSrc(props)} />\r\n    <h2 key={props.monster.id}>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n  )\r\n}\r\n\r\nfunction getSrc(props) {\r\n  console.log(\"Inside getSrc\",props)\r\n  \r\n  let src = `https://robohash.org/${props.monster.id}?set=set4&size=180x180`\r\n  if (props.newGroup === \"monsters\") {\r\n    src = `https://robohash.org/${props.monster.id}?set=set2&size=180x180`\r\n  } else if(props.newGroup === \"Humans\") {\r\n    src = `https://robohash.org/${props.monster.id}?set=set5&size=180x180`\r\n  }\r\n  return src\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component.jsx'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList =  (props) => {\r\n  \r\n  return (\r\n    <div className='card-list'>\r\n\r\n    {\r\n        props.monster.map((monster) => (\r\n          <Card key={monster.id} monster={monster} newGroup={props.changeto}/>\r\n        // <h1 key={monster.id}> { monster.name }</h1>\r\n      ))\r\n    }\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeHolder,handleChange}) => (\r\n    <input\r\n      className=\"search\" \r\n      type=\"search\" \r\n      placeholder={placeHolder} \r\n      onChange={handleChange}\r\n    />\r\n  )\r\n","import React, { Component } from 'react';\r\n\r\nimport \"./button-primary-component.css\"\r\n\r\nclass ButtonPrimary extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"buttonWrapper\">\r\n        <button \r\n        className=\"buttonPrimary\" \r\n        onClick={()=>this.props.onclickHandler(this.props.lable)}\r\n        >\r\n        {this.props.lable}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonPrimary;","import React, { Component } from 'react';\n\nimport {CardList} from \"./components/card-list/card-list.component\"\nimport {SearchBox} from \"./components/search-box/search-box.component\"\nimport ButtonPrimary from \"./components/Button-primary/button-primary-component\"\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters : [],\n      searchField:'',\n      CurrentRoladec:'Cats',\n    };\n  }\n\n  onbuttonClickHandler = (e) => {\n    console.log(e)\n    this.setState({CurrentRoladec : e})\n  }\n\n  handleChange = (e) => {\n    this.setState ({ searchField:e.target.value})\n  }\n\n\n  \tcomponentDidMount() {\n\n      var myHeaders = new Headers();\n      myHeaders.append(\"Secret-Key\", \"$2b$10$QZF35I75v13tuHyxZvd3Ze9BJ4KCBJMID.uEU95k0csEopTedqnCO\");\n      myHeaders.append(\"Cookie\", \"__cfduid=dc9e53a4698e6f6ee979c08ed317f0e9a1598973697\");\n\n      var requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n      };\n\n      fetch(\"https://api.jsonbin.io/b/5f4e656f4d8ce41113869741/2\", requestOptions)\n      .then(response => response.json())\n      .then(result =>this.setState({monsters:result.Users}))\n      .catch(error => console.log('error', error));\n    }\n\n    render() {\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter(monster => \n          monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n          )\n      return (\n        <div className=\"App\">\n        <h1>{this.state.CurrentRoladec} Rolodex </h1>\n\n        <ButtonPrimary lable=\"monsters\" \n        onclickHandler = {(ele) => this.onbuttonClickHandler(ele)}/>\n        <ButtonPrimary lable=\"Humans\" \n        onclickHandler = {(ele) => this.onbuttonClickHandler(ele)}/>\n        <ButtonPrimary lable=\"Cats\" \n        onclickHandler = {(ele) => this.onbuttonClickHandler(ele)}/>\n        <SearchBox \n        placeHolder = {\"search \" + this.state.CurrentRoladec}\n        handleChange = {this.handleChange}\n        />\n          <CardList monster={filteredMonsters} changeto={this.state.CurrentRoladec}/>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}